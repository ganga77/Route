{"ast":null,"code":"var _jsxFileName = \"/Users/gangasingh/Documents/React/route/frontend/src/pages/NewEventPage.js\";\nimport EventForm from \"../components/EventForm\";\nimport { redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewEventPage() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n}\n_c = NewEventPage;\nexport async function action({\n  request\n}) {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: `Failed to create the event`,\n      status: 500\n    }));\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["EventForm","redirect","jsxDEV","_jsxDEV","NewEventPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","Response","message","status","$RefreshReg$"],"sources":["/Users/gangasingh/Documents/React/route/frontend/src/pages/NewEventPage.js"],"sourcesContent":["import EventForm from \"../components/EventForm\"\nimport { redirect } from \"react-router-dom\";\n\nexport default function NewEventPage(){\n    \n    return <EventForm />\n}\n\nexport async function action({request}) {\n    const data = await request.formData();\n    const eventData = {\n        title: data.get('title'),\n        image: data.get('image'),\n        date: data.get('date'),\n        description: data.get('description')\n    }\n    const response = await fetch('http://localhost:8080/events', \n    {\n        method: 'POST',\n        headers: {\n            'Content-Type' : 'application/json'\n        },\n        body: JSON.stringify(eventData)\n    } \n    )\n\n    if (!response.ok) {\n        throw new Response(JSON.stringify({\n            message: `Failed to create the event`, \n            status: 500}\n    ))\n      } else {\n        return response;\n      }\n}"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,YAAYA,CAAA,EAAE;EAElC,oBAAOD,OAAA,CAACH,SAAS;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxB;AAACC,EAAA,GAHuBL,YAAY;AAKpC,OAAO,eAAeM,MAAMA,CAAC;EAACC;AAAO,CAAC,EAAE;EACpC,MAAMC,IAAI,GAAG,MAAMD,OAAO,CAACE,QAAQ,CAAC,CAAC;EACrC,MAAMC,SAAS,GAAG;IACdC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACvC,CAAC;EACD,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAC3D;IACIC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAG;IACrB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAClC,CACA,CAAC;EAED,IAAI,CAACM,QAAQ,CAACO,EAAE,EAAE;IACd,MAAM,IAAIC,QAAQ,CAACH,IAAI,CAACC,SAAS,CAAC;MAC9BG,OAAO,EAAG,4BAA2B;MACrCC,MAAM,EAAE;IAAG,CACnB,CAAC,CAAC;EACA,CAAC,MAAM;IACL,OAAOV,QAAQ;EACjB;AACN;AAAC,IAAAX,EAAA;AAAAsB,YAAA,CAAAtB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}